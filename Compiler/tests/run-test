#!/bin/bash
red=$'\e[1;31m'
grn=$'\e[1;32m'
end=$'\e[0m'

echo "Tests $1:"
echo 

test_category=$1
[[ -z $2 ]] && verbose="-" || verbose="-v"
out=""
tmp=""
bin=../_build/default/crust.exe
score_i=0
avaliated_tests=0

# Variables
i=0
number_of_steps=50
number_of_tests=$(expr $(ls -l good/"$test_category"/*.rs | grep -v ^l | wc -l))
if [ $number_of_tests -lt $number_of_steps ]; then
    value_of_step=`expr $number_of_steps / $number_of_tests`
else
    value_of_step=`expr $number_of_tests / $number_of_steps`
fi
progress_ammount_per_test=`expr 100 / $number_of_tests`


function print_progress () {
    current_progress=`expr $i \* $progress_ammount_per_test`
    
    if [ $number_of_tests -lt $number_of_steps ]; then
        current_value=`expr $i \* $value_of_step`
    else
        current_value=`expr $i / $value_of_step`
    fi

    echo -n '['
    for ((j=0; j<current_value; j++)) ; do echo -n '='; done
    echo -n '=>'
    for ((j=current_value; j<number_of_steps; j++)) ; do echo -n ' '; done
}

function print_clean () {
    if [ $current_progress -eq 100 ] ; then
        echo -n "] ($i/$number_of_tests)"
        echo 
    else
        echo -n "] ($i/$number_of_tests)" $'\r'
    fi
}

function run_test (){
    f=$1

    avaliated_tests=`expr $avaliated_tests + 1`;
    expected=good/"$test_category"/`basename $f .rs`.out
    assembly=good/"$test_category"/`basename $f .rs`.s
    
    # Compile file
    $bin $f
    gcc -g -no-pie $assembly

    # Compare output
    if ./a.out > out; then
	    if cmp --quiet out $expected; then
	        score_i=`expr $score_i + 1`;
            
            if [ $verbose == "-v" ] ; then
	            out+="  ${grn}SUCCESS: $f${end}\n"
            fi 
        else
	        out+="  ${red}ERROR:   $f Wrong output${end}\n" 
	    fi
    else
        out+="  ${red}ERROR:   $f --- Failed Interpretation${end}\n"
	fi
}

# Iterate good tests
for f in good/"$test_category"/*.rs; do
    i=`expr $i + 1`
    print_progress

    run_test $f

    print_clean
done

percent=`expr 100 \* $score_i / $avaliated_tests`

printf "$out" "${end}"
printf "\nScore: $score_i/$avaliated_tests tests = $percent%%\n"
echo

# Remove tmp files
rm  -f good/"$test_category"/*.s
rm  -f out
rm  -f a.out
